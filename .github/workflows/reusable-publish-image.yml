name: Publish Docker Image

on:
  workflow_call:
    inputs:
      registryImage:
        required: false
        type: string
        description: 'The image name to use for the Docker image'
      enablePlatforms:
        required: false
        type: boolean
        default: false
      platforms:
        required: false
        type: string
        description: 'The platforms to build the Docker image for available platforms: linux/amd64,linux/arm64 and all platforms: linux/amd64,linux/arm64'
        default: 'linux/amd64,linux/arm64'
      tag:
        required: false
        type: string
        default: 'latest'
        description: 'The tag to use for the Docker image'
      commitHash:
        required: false
        type: string
        description: 'The commit hash to use for the Docker image'


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ inputs.registryImage || github.repository }}
  LATEST_TAG: ${{ inputs.registryImage || github.repository }}:${{ inputs.tag }}
  HASH_TAG: ${{ inputs.registryImage || github.repository }}:${{ inputs.commitHash || github.sha }}

jobs:
  build:
    name: Publish WolfStar image to container registries
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(inputs.platforms)  }}
    steps:
      - name: Prepare
        if: ${{ inputs.enablePlatforms == true }}
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}



      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        with:
          load: true
          tags: ${{ env.IMAGE_NAME }}:test

      - name: Test
        run: |
          docker run --rm ${{ env.IMAGE_NAME }}:test

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.IMAGE_NAME }},push=true
          tags: |
            ${{ env.LATEST_TAG }}
            ${{ env.HASH_TAG }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        env:
          PLATFORM_PAIR: ${{ env.PLATFORM_PAIR }}
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.LATEST_TAG }}
